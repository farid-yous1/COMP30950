import org.scalatest.BeforeAndAfter
import org.scalatest.funsuite.AnyFunSuite

// These tests are given to the students.
// DO NOT EDIT THIS FILE as any changes may cause your program
// to fail tests during grading.

class MelBasicSuite extends AnyFunSuite with BeforeAndAfter {
  var college: College = null

  before { // create a fresh college before each test
    college = College()
    college.addCourse(Course("COMP1111", Autumn, 2))
    college.addCourse(Course("COMP8888", Spring, 4))
    college.addCourse(Course("COMP2222", Autumn, 5))
    college.addCourse(Course("COMP9999", Spring, 4))
  }

  /** ******************** Part1 Tests ********************* */

  test("Part1: toString correct for Course") {
    val course = Course("COMP30950", Autumn, 5)
    assert(course.toString === "COMP30950, Autumn, 5")
  }

  test("Part1: toString correct for College") {
    val expected = "[COMP1111, Autumn, 2], [COMP8888, Spring, 4], [COMP2222, Autumn, 5], [COMP9999, Spring, 4]"
    assert(college.toString === expected)
  }

  test("Part1: sortCoursesByName correct for College") {
    college.sortCoursesByName()
    val expected = "[COMP1111, Autumn, 2], [COMP2222, Autumn, 5], [COMP8888, Spring, 4], [COMP9999, Spring, 4]"
    assert(college.toString === expected)
  }

  test("Part1: averageDifficultyInTrimester correct for College") {
    assert(college.averageDifficultyInTrimester(Autumn) === 3.5)
    assert(college.averageDifficultyInTrimester(Spring) === 4.0)
  }

  /** ******************** Part2 Tests ********************* */

  test("Part2: mostChillStudent correct for College") {
    college.addStudent("Bob", List("COMP2222", "COMP8888")) // 9
    college.addStudent("Jo", List("COMP2222", "COMP1111")) // 7
    college.addStudent("Alex", List("COMP1111", "COMP8888")) // 6
    assert(college.mostChillStudent === "Alex")
  }

  /** ******************** Part3 Tests ********************* */
  
  test("Part3: checkConsistency correct for College") {
    college.addStudent("Alex", List("COMP1111", "COMP1111", "INVALID1", "INVALID2"))
    college.addStudent("Bob", List("COMP2222", "COMP8888", "COMP9999"))
    college.addStudent("Jo", List("INVALID1", "INVALID1"))
    assert(college.checkConsistency === (4, 1, true))
  }
}